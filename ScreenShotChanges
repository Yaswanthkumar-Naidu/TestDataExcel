fullPageSS=Yes

 TestRunSettings.setFullPageSS(prop.getProperty("fullPageSS"));

private static String fullPageSS = "";

	public static String getFullPageSS() {
		return fullPageSS;
	}

	public static void setFullPageSS(String fullPageSS) {
		TestRunSettings.fullPageSS = fullPageSS;
	}

ScreenshotCommon.captureFullPageScreenShot(driver, moduleName+"-"+screenName);			

======================================
private static int screenshotCounter = 1;
	public static void captureFullPageScreenShot(WebDriver driver, String screenName)
	{
		if(TestRunSettings.getFullPageSS().equalsIgnoreCase("Yes")) {

			String screenshotPath = createDirectory(TestRunSettings.getResultsPath(), "Screenshot_Capture");
			String screenShotFileName=screenName + "_" + screenshotCounter + ".jpeg";
			screenshotPath = screenshotPath + File.separator +screenShotFileName;

			captureFullPageSS(driver,screenshotPath);

			screenshotCounter++;
		}

	}
	
	public static void captureFullPageSS(WebDriver driver, String screenshotPath){
	    try {
	        JavascriptExecutor jsExec = (JavascriptExecutor) driver;
	        jsExec.executeScript("window.scrollTo(0, 0);");
	        Long viewportHeight = (Long) jsExec.executeScript("return window.innerHeight;");
	        Long totalHeight = (Long) jsExec.executeScript("return document.documentElement.scrollHeight;");
	        Long currentPosition = 0L;
	        while (currentPosition < totalHeight) {
	            File screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
	            FileUtils.copyFile(screenshot, new File(screenshotPath));
	            //getUniqueScreenshotPath(
	            currentPosition += viewportHeight;
	            if (currentPosition > totalHeight) {
	                currentPosition = totalHeight;
	            }
	               jsExec.executeScript("window.scrollTo(0, " + currentPosition + ");");
	            Thread.sleep(500);
	        }
	        jsExec.executeScript("window.scrollTo(0, 0);");
	    } catch (Exception e) {
	        e.printStackTrace();
	    }
	}
================================================================================
public String getScreenShot(String screenshotPath, WebDriver driver)
	{
		try {
			
			  JavascriptExecutor jsExec = (JavascriptExecutor) driver;
		        
		        Object originalZoom = jsExec.executeScript("return document.body.style.zoom;");
		        
		       try {
		           
		            jsExec.executeScript("document.body.style.zoom='50%'");
		           
		            jsExec.executeScript(
		                "document.body.style.transform='scale(0.5)';" +
		                "document.body.style.transformOrigin='0 0';"
		            );
		            
		            Thread.sleep(1000);
		            
		        } catch (Exception e) {
		        	logger.error(e.getMessage());
		        }
			
			TakesScreenshot scrst = ((TakesScreenshot)driver);

			Date timestamp = new Date();
			// Call getScreenshotAs method to create an image file
			File srcFile = scrst.getScreenshotAs(OutputType.FILE);

			// Read the screenshot image
	        BufferedImage image = ImageIO.read(srcFile);

	        // Create a graphics context on the image
	        Graphics2D graphics = image.createGraphics();

	        // Set the timestamp on the image
	        Font font = new Font("Arial", Font.BOLD, 24); // Adjust the font name and size as needed
	        graphics.setFont(font);
	        graphics.setColor(Color.RED);
	        graphics.drawString(timestamp.toString(), 10, 20); // Adjust coordinates as needed

			// Move image file to the new destination
			File destFile = new File(screenshotPath);

			ImageIO.write(image, "png", srcFile);
			// Copy file at the destination
			FileUtils.copyFile(srcFile, destFile);
			byte [] imageBytes = IOUtils.toByteArray(new FileInputStream(destFile));
			screenshotPath =  Base64.getEncoder().encodeToString(imageBytes);

		}catch(Exception e) {
			logger.error(e.getMessage());
		}
		return screenshotPath;
		
	}
===========
