
	public void click(WebDriver drivernew, WebElement element, String testData, TestCaseParam testCaseParam, PageDetails pageDetails) throws CustomException {
		 if (!(testData.equalsIgnoreCase("n/a")) && !(testData.equalsIgnoreCase("n\\a")) && !(testData.equalsIgnoreCase(TESTDATA_NOT_APPLICABLE))) {
		        String actionDescription = element.toString();
		        LocalDateTime startTime = LocalDateTime.now();
		        String action = CLICK_ACTION_PREFIX + getLocatorFromWebElement(element, drivernew, testCaseParam, pageDetails);
		        WebDriverWait wait = new WebDriverWait(drivernew, TIME_OUT);
		        
		        int maxAttempts = TestRunSettings.getRetryAttempts();

		        int attempts = 0;
		        boolean clickSuccessful = false;
		        
		        while (attempts < maxAttempts && !clickSuccessful) {
		            try {
		                Webkeywords.instance().fluentWait(drivernew, element);
		                Actions actionnew = new Actions(drivernew);
		                actionnew.moveToElement(element).build().perform();
		                element.click();
		                waitTillPageLoad(wait);
		                testStepDetails.logTestStepDetails(drivernew, testCaseParam, action, actionDescription, pageDetails, startTime, STATUSDONE);
		                clickSuccessful = true;
		            } catch (InterruptedException e) {
		                Thread.currentThread().interrupt();
		                break; 
		                
		            } catch (Exception e) {
		               
		                if (attempts < maxAttempts) {
		                    try {
		                        pause();
		                        logger.info("Retry attempt " + attempts + " of " + maxAttempts);
		                       
		                        Webkeywords.instance().waitElementforelementclickable(drivernew, element, 1000);
		                        JavascriptExecutor executor = (JavascriptExecutor) drivernew;
		                        executor.executeScript("arguments[0].scrollIntoView(true);", element);
		                        pause();
		                        executor.executeScript("arguments[0].click();", element);
		                        waitTillPageLoad(wait);
		                        testStepDetails.logTestStepDetails(drivernew, testCaseParam, action, actionDescription, pageDetails, startTime, STATUSDONE);
		                        clickSuccessful = true;
		                        
		                    } catch (InterruptedException f) {
		                        Thread.currentThread().interrupt();
		                        break;
		                    } catch (Exception f) {
		                        logger.error("Attempt " + attempts + " failed: " + f.getMessage());
		                       }
		                } else {
		                   
		                    logger.error(LOG_FAILED_FORMAT, action, actionDescription);
		                    testStepDetails.logExceptionDetails(drivernew, testCaseParam, action, actionDescription, startTime, strigToException(getActionDescription(action, actionDescription)));
		                    testStepDetails.logTestStepDetails(drivernew, testCaseParam, action, actionDescription, pageDetails, startTime, STATUSFAIL);
		                    throw new CustomException("Failed to click element after " + maxAttempts + " attempts. Last error: " + e.getMessage());
		                }
		            }
		            attempts++;
		        }
		    }
		}
=======================
public void setText(WebDriver drivernew, WebElement element1, String text1, TestCaseParam testCaseParam, PageDetails pageDetails) throws CustomException {
		if (!(text1.equalsIgnoreCase("n/a")) && !(text1.equalsIgnoreCase("n\\a")) && !(text1.equalsIgnoreCase(TESTDATA_NOT_APPLICABLE))) {
			String action = ENTERED_TEXT + text1;
			String actionDescription = ENTERED_TEXT + text1;
			String password = "*".repeat(text1.length());
			LocalDateTime startTime = LocalDateTime.now();

			int maxRetries = TestRunSettings.getRetryAttempts();
			int retryCount = 0;
			boolean success = false;

			while (!success && retryCount < maxRetries) {
				try {
					if (!textCheck(text1)) {
						Webkeywords.instance().fluentWait(drivernew, element1);
						WebDriverWait wait1 = new WebDriverWait(drivernew, 1000);
						wait1.until(ExpectedConditions.elementToBeClickable(element1));
						element1.clear();
						element1.sendKeys(text1);

						boolean isDataFilled1 = false;
						while (!isDataFilled1) {
							String textBoxValue = element1.getAttribute(VALUE);
							String textBoxtest = element1.getText();
							isDataFilled1 = validateTextBoxValue(drivernew, element1, text1, isDataFilled1, textBoxValue,
									textBoxtest);
						}
						
						if (element1.getAttribute("type").equals("password")) {
							logger.info("Successfully entered Password : {}", password);
							testStepDetails.logTestStepDetails(drivernew, testCaseParam, "Entered Password -> " + password,
									"Entered Password -> " + password, pageDetails, startTime, STATUSDONE);
						} else {
							logger.info(SUCCESSFULLY_ENTERED_TEXT, text1, element1);
							testStepDetails.logTestStepDetails(drivernew, testCaseParam, action,
									getActionDescription(action, actionDescription), pageDetails, startTime, STATUSDONE);
						}
						success = true;
					}

				} catch (Exception e) {

					if (retryCount < maxRetries) {
						logger.warn("Attempt {} failed. Retrying... Error: {}", retryCount, e.getMessage());
						pause();
					}

				}
				retryCount++;
			}
		}
	}

====================
public void jsClick(WebDriver driver, WebElement element) throws CustomException {
	    JavascriptExecutor js = (JavascriptExecutor)driver;
	    int maxRetries = TestRunSettings.getRetryAttempts();
	    int retryCount = 0;

	    while (retryCount < maxRetries) {
	        try {
	           
	            WebDriverWait wait = new WebDriverWait(driver, 10);
	            wait.until(ExpectedConditions.elementToBeClickable(element));
	            
	            js.executeScript("arguments[0].click();", element);
	            
	            logger.info("Successfully clicked element using JavaScript");
	            return;
	            
	        } catch (Exception e) {
	          
	            if (retryCount < maxRetries) {
                   	logger.info("Click attempt failed. Retrying...") ;
	            	pause();
	            }
	        }
	        retryCount++;
	    }
	}
========================

public void setText(WebDriver drivernew, WebElement element1, String text1, TestCaseParam testCaseParam, PageDetails pageDetails) {
    if (!(text1.equalsIgnoreCase("n/a")) && !(text1.equalsIgnoreCase("n\\a")) && !(text1.equalsIgnoreCase(TESTDATA_NOT_APPLICABLE))) {
        String action = ENTERED_TEXT + text1;
        String actionDescription = ENTERED_TEXT + text1;
        String password = "*".repeat(text1.length());
        LocalDateTime startTime = LocalDateTime.now();

        int maxRetries = TestRunSettings.getRetryAttempts();
        int retryCount = 0;
        boolean success = false;
        Exception lastException = null;

        while (!success && retryCount < maxRetries) {
            try {
                if (!textCheck(text1)) {
                    Webkeywords.instance().fluentWait(drivernew, element1);
                    WebDriverWait wait1 = new WebDriverWait(drivernew, 1000);
                    wait1.until(ExpectedConditions.elementToBeClickable(element1));
                    element1.clear();
                    element1.sendKeys(text1);

                    boolean isDataFilled1 = false;
                    while (!isDataFilled1) {
                        String textBoxValue = element1.getAttribute(VALUE);
                        String textBoxtest = element1.getText();
                        isDataFilled1 = validateTextBoxValue(drivernew, element1, text1, isDataFilled1, textBoxValue,
                                textBoxtest);
                    }
                    
                    if (element1.getAttribute("type").equals("password")) {
                        logger.info("Successfully entered Password : {}", password);
                        testStepDetails.logTestStepDetails(drivernew, testCaseParam, "Entered Password -> " + password,
                                "Entered Password -> " + password, pageDetails, startTime, STATUSDONE);
                    } else {
                        logger.info(SUCCESSFULLY_ENTERED_TEXT, text1, element1);
                        testStepDetails.logTestStepDetails(drivernew, testCaseParam, action,
                                getActionDescription(action, actionDescription), pageDetails, startTime, STATUSDONE);
                    }
                    success = true;
                }
            } catch (Exception e) {
                lastException = e;
                if (retryCount < maxRetries - 1) {  // Only log if not the last attempt
                    logger.warn("Attempt {} failed. Retrying... Error: {}", retryCount + 1, e.getMessage());
                    pause();
                }
            }
            retryCount++;
        }

        // If all attempts failed, throw the last exception
        if (!success) {
            logger.error("Failed to set text after {} attempts", maxRetries);
            throw new RuntimeException("Failed to set text '" + text1 + "' after " + maxRetries + " attempts", lastException);
        }
    }
}

===========================
screen shot
===========================
public String captureScreenShot(WebDriver driver, String testCaseName) {
    try {
        String screenShotFileName = testCaseName.substring(1, 15) + "_" + getCurrentTime() + ".jpeg";
        screenShotFileName = screenShotFileName.replace(" ", "_");
        String base64Screenshot;

        if (ReportContants.isFullPageScreenShot()) {
            base64Screenshot = captureFullPageBase64(driver);
        } else {
            base64Screenshot = captureRegularBase64(driver);
        }

        return "data:image/jpeg;base64," + base64Screenshot;
    } catch (Exception e) {
        System.out.println("Failed to capture screenshot: " + e.getMessage());
        return null;
    }
}

private String captureRegularBase64(WebDriver driver) {
    try {
        TakesScreenshot ts = (TakesScreenshot) driver;
        return ts.getScreenshotAs(OutputType.BASE64);
    } catch (Exception e) {
        System.out.println("Failed to capture regular screenshot: " + e.getMessage());
        return null;
    }
}

private String captureFullPageBase64(WebDriver driver) {
    try {
        // Get the total height of the page
        JavascriptExecutor js = (JavascriptExecutor) driver;
        Long scrollHeight = (Long) js.executeScript("return Math.max(" +
            "document.body.scrollHeight, document.documentElement.scrollHeight," +
            "document.body.offsetHeight, document.documentElement.offsetHeight," +
            "document.body.clientHeight, document.documentElement.clientHeight);");
        
        // Set viewport height
        Long windowHeight = (Long) js.executeScript("return window.innerHeight");
        
        // Create full page screenshot
        BufferedImage fullImg = new BufferedImage(
            driver.manage().window().getSize().width,
            scrollHeight.intValue(),
            BufferedImage.TYPE_INT_RGB
        );
        Graphics2D graphics = fullImg.createGraphics();
        
        // Scroll and capture
        int heightCovered = 0;
        while (heightCovered < scrollHeight) {
            js.executeScript("window.scrollTo(0, " + heightCovered + ")");
            Thread.sleep(100); // Wait for scroll
            
            String base64Part = ((TakesScreenshot) driver).getScreenshotAs(OutputType.BASE64);
            byte[] decodedPart = Base64.getDecoder().decode(base64Part);
            BufferedImage part = ImageIO.read(new ByteArrayInputStream(decodedPart));
            
            // Draw the part into the full image
            graphics.drawImage(part, 0, heightCovered, null);
            heightCovered += windowHeight;
        }
        
        // Reset scroll position
        js.executeScript("window.scrollTo(0, 0)");
        
        // Convert full image to base64
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        ImageIO.write(fullImg, "jpeg", outputStream);
        return Base64.getEncoder().encodeToString(outputStream.toByteArray());
        
    } catch (Exception e) {
        System.out.println("Failed to capture full page screenshot: " + e.getMessage());
        return null;
    }
}

// Helper method to get current time in your format
private String getCurrentTime() {
    return new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
}
======================================

public String captureFullPageBase64(WebDriver driver) {
    JavascriptExecutor jsExec = (JavascriptExecutor) driver;
    
    // Get window and webpage heights
    Long windowHeight = (Long) jsExec.executeScript("return window.innerHeight;");
    Long webpageHeight = (Long) jsExec.executeScript("return document.body.scrollHeight;");
    Long currentWindowScroll = 0L;
    
    try {
        // Create a BufferedImage for the full page
        int pageWidth = driver.manage().window().getSize().width;
        BufferedImage fullImage = new BufferedImage(pageWidth, webpageHeight.intValue(), BufferedImage.TYPE_INT_RGB);
        Graphics2D fullImageGraphics = fullImage.createGraphics();

        do {
            // Scroll to current position
            jsExec.executeScript("window.scrollTo(0, " + currentWindowScroll + ");");

            // Wait for content to load
            Actions act = new Actions(driver);
            act.pause(5000).perform();

            // Capture current viewport
            String base64Viewport = ((TakesScreenshot) driver).getScreenshotAs(OutputType.BASE64);
            byte[] decodedViewport = Base64.getDecoder().decode(base64Viewport);
            BufferedImage viewportImage = ImageIO.read(new ByteArrayInputStream(decodedViewport));

            // Add timestamp to viewport image
            Graphics2D viewportGraphics = viewportImage.createGraphics();
            viewportGraphics.setColor(Color.WHITE);
            viewportGraphics.setFont(new Font("Arial", Font.BOLD, 12));
            Date timestamp = new Date();
            viewportGraphics.drawString(timestamp.toString(), 10, 20);
            viewportGraphics.dispose();

            // Calculate Y position to draw the viewport image
            int yPosition = currentWindowScroll.intValue();
            
            // Draw the viewport image onto the full image
            fullImageGraphics.drawImage(viewportImage, 0, yPosition, null);

            // Increment scroll position
            currentWindowScroll = currentWindowScroll + windowHeight;

        } while (currentWindowScroll <= webpageHeight);

        // Clean up graphics
        fullImageGraphics.dispose();

        // Reset scroll position
        jsExec.executeScript("window.scrollTo(0, 0);");

        // Convert the full image to Base64
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        ImageIO.write(fullImage, "png", outputStream);
        String base64String = Base64.getEncoder().encodeToString(outputStream.toByteArray());
        
        return base64String;

    } catch (Exception e) {
        ReportCommon reportDetails = new ReportCommon();
        LocalDateTime startTime = LocalDateTime.now();
        reportDetails.logExceptionDetails(driver, "Capturing Screenshot", "Capturing Screenshot", startTime, e);
        return null;
    }
}

==========================

