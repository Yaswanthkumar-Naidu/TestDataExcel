String [] hlWorker = {"AutoTitleIV_Placement_State_V1SIT@osi.ca.gov","Cares@401347563679012"};
		loginMap.put("TitleIVStaffCDSSPlacement", hlWorker);
		
                String [] dlPlacer = {"Auto_TitleIV_Staff_Placer@osi.ca.gov","Cares@401347563625"};
		loginMap.put("TitleIVStaffPlacer", dlPlacer);
		
                String [] hlWorker1 = {"Auto_Hstaff1_ContraCosta_V1_SIT@nomail.ca.gov","Cares@401347563793981"};                                                          
		loginMap.put("HLWorkerContraCosta", hlWorker1);

                String [] hlSup = {"Auto_Hsupervisor1_ContraCosta_V1_SIT@nomail.ca.gov","Cares@401347563793981"};
		loginMap.put("HLSupervisorContraCosta", hlSup);

                String [] erWorker = {"auto_erworker3_contracosta_v1sit@osi.ca.gov","Cares@401347563799"};
	        loginMap.put("ERWorkerContraCosta", erWorker);

                String [] cmWorker = {"autocmworker451_CCosta_V1SIT@osi.ca.gov","Cares@401347563679"};
	        loginMap.put("CMWorkerContraCosta", cmWorker);

============================================

import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.WebDriverWait;
import java.time.Duration;

public class WebDriverManager {
    private WebDriver driver;
    
    public WebDriver initializeDriver() {
        try {
            ChromeOptions options = new ChromeOptions();
            
            // Essential options to prevent 403
            options.addArguments("--remote-allow-origins=*");
            options.addArguments("--no-sandbox");
            options.addArguments("--disable-dev-shm-usage");
            
            // Additional options to avoid detection
            options.addArguments("--disable-blink-features=AutomationControlled");
            options.addArguments("--disable-extensions");
            options.addArguments("--disable-notifications");
            options.addArguments("--disable-popup-blocking");
            
            // Remove automation flags
            options.setExperimentalOption("excludeSwitches", 
                Arrays.asList("enable-automation", "enable-logging"));
            
            // Add user preferences
            Map<String, Object> prefs = new HashMap<>();
            prefs.put("credentials_enable_service", false);
            prefs.put("profile.password_manager_enabled", false);
            options.setExperimentalOption("prefs", prefs);
            
            driver = new ChromeDriver(options);
            
            // Set timeouts
            driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(30));
            driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
            
            return driver;
            
        } catch (Exception e) {
            throw new RuntimeException("Failed to initialize WebDriver: " + e.getMessage());
        }
    }
}



home.selectLinkFromNavigationMenue(testCaseParam, scriptIteration, "1","Home");
    	home.verifyingHomeCurrentTaskAssignmentsFieldsHeaders(testCaseParam, scriptIteration, "1");
    	home.verifyingHomeServiceTypesFieldsHeaders(testCaseParam, scriptIteration, "1");
    	home.verifyingHomeMyTaskListFieldsHeaders(testCaseParam, scriptIteration, "1");
    	home.verifyingHomeMyOrganizationFieldsHeaders(testCaseParam, scriptIteration, "1");	


public void verifyingHomeCurrentTaskAssignmentsFieldsHeaders (TestCaseParam testCaseParam, String scriptIteration, String pomIteration) throws CustomException {
		PageDetails action = new PageDetails();
		LocalDateTime startTime= LocalDateTime.now();
		action.setPageActionName("verifying Current Task Assignments Fields");
		action.setPageActionDescription("verifying Current Task Assignments Fields");
		try {
			Map<String, ArrayList<String>>	testCaseDataSd = util.getScreenTCData(screenName, TestRunSettings.getTestNGTestMethodName(),TestRunSettings.getTestDataPath(),
					TestRunSettings.getTestDataMappingFileName() ,TestRunSettings.getTestDataMappingSheetNameSd(),scriptIteration,pomIteration);
				
				Webkeywords.instance().verifyElementDisplayed(driver, genericLocators.link(driver, "Current Task Assignments",testCaseDataSd.get("CURRENTTASKASSIGNMENT_VERIFY").get(0)), testCaseDataSd.get("CURRENTTASKASSIGNMENT_VERIFY").get(0), testCaseParam, action);
				Webkeywords.instance().verifyTextDisplayed(driver, genericLocators.textOnPage(driver, "Due Date",testCaseDataSd.get("DUEDATE_VERIFY").get(0)), testCaseDataSd.get("DUEDATE_VERIFY").get(0), testCaseParam, action);
				Webkeywords.instance().verifyTextDisplayed(driver, genericLocators.textOnPage(driver, "Subject",testCaseDataSd.get("SUBJECT_VERIFY").get(0)), testCaseDataSd.get("SUBJECT_VERIFY").get(0), testCaseParam, action);
				Webkeywords.instance().verifyTextDisplayed(driver, genericLocators.textOnPage(driver, "Related To",testCaseDataSd.get("RELATEDTO_VERIFY").get(0)), testCaseDataSd.get("RELATEDTO_VERIFY").get(0), testCaseParam, action);
				Webkeywords.instance().verifyTextDisplayed(driver, genericLocators.textOnPage(driver, "Priority",testCaseDataSd.get("PRIORITY_VERIFY").get(0)), testCaseDataSd.get("PRIORITY_VERIFY").get(0), testCaseParam, action);
				Webkeywords.instance().verifyTextDisplayed(driver, genericLocators.textOnPage(driver, "Status",testCaseDataSd.get("STATUS_VERIFY").get(0)), testCaseDataSd.get("STATUS_VERIFY").get(0), testCaseParam, action);
				Webkeywords.instance().verifyTextDisplayed(driver, genericLocators.textOnPage(driver, "Source",testCaseDataSd.get("SOURCE_VERIFY").get(0)), testCaseDataSd.get("SOURCE_VERIFY").get(0), testCaseParam, action);
				
				
		} catch (Exception e) {
				logger.error("Failed == {} ", action.getPageActionDescription());
				exceptionDetails.logExceptionDetails(driver, testCaseParam, action.getPageActionName(), action.getPageActionDescription(), startTime,e);
			}
	}
	
	public void verifyingHomeServiceTypesFieldsHeaders (TestCaseParam testCaseParam, String scriptIteration, String pomIteration) throws CustomException {
		PageDetails action = new PageDetails();
		LocalDateTime startTime= LocalDateTime.now();
		action.setPageActionName("verifying ServiceTypes Fields");
		action.setPageActionDescription("verifying ServiceTypes Fields");
		try {
			Map<String, ArrayList<String>>	testCaseDataSd = util.getScreenTCData(screenName, TestRunSettings.getTestNGTestMethodName(),TestRunSettings.getTestDataPath(),
					TestRunSettings.getTestDataMappingFileName() ,TestRunSettings.getTestDataMappingSheetNameSd(),scriptIteration,pomIteration);
				
				Webkeywords.instance().verifyTextDisplayed(driver, genericLocators.textOnPage(driver, "Service Types",testCaseDataSd.get("SERVICETYPES_VERIFY").get(0)), testCaseDataSd.get("SERVICETYPES_VERIFY").get(0), testCaseParam, action);
				Webkeywords.instance().verifyTextDisplayed(driver, genericLocators.textOnPage(driver, "Service Type Name",testCaseDataSd.get("SERVICETYPENAME_VERIFY").get(0)), testCaseDataSd.get("SERVICETYPENAME_VERIFY").get(0), testCaseParam, action);
				Webkeywords.instance().verifyTextDisplayed(driver, genericLocators.textOnPage(driver, "Service Type Description",testCaseDataSd.get("SERVICETYPEDESCRIPTION_VERIFY").get(0)), testCaseDataSd.get("SERVICETYPEDESCRIPTION_VERIFY").get(0), testCaseParam, action);
				Webkeywords.instance().verifyTextDisplayed(driver, genericLocators.textOnPage(driver, "Service Category",testCaseDataSd.get("SERVICECATEGORY_VERIFY").get(0)), testCaseDataSd.get("SERVICECATEGORY_VERIFY").get(0), testCaseParam, action);
				Webkeywords.instance().verifyTextDisplayed(driver, genericLocators.textOnPage(driver, "Last Modified Date",testCaseDataSd.get("LASTMODIEFIEDDATE_VERIFY").get(0)), testCaseDataSd.get("LASTMODIEFIEDDATE_VERIFY").get(0), testCaseParam, action);
				
		} catch (Exception e) {
				logger.error("Failed == {} ", action.getPageActionDescription());
				exceptionDetails.logExceptionDetails(driver, testCaseParam, action.getPageActionName(), action.getPageActionDescription(), startTime,e);
			}
	}
	
	public void verifyingHomeMyTaskListFieldsHeaders (TestCaseParam testCaseParam, String scriptIteration, String pomIteration) throws CustomException {
		PageDetails action = new PageDetails();
		LocalDateTime startTime= LocalDateTime.now();
		action.setPageActionName("verifying MyTaskList Fields");
		action.setPageActionDescription("verifying MyTaskList Fields");
		try {
			Map<String, ArrayList<String>>	testCaseDataSd = util.getScreenTCData(screenName, TestRunSettings.getTestNGTestMethodName(),TestRunSettings.getTestDataPath(),
					TestRunSettings.getTestDataMappingFileName() ,TestRunSettings.getTestDataMappingSheetNameSd(),scriptIteration,pomIteration);
				
			Webkeywords.instance().click(driver, genericLocators.link(driver, "My Task List",testCaseDataSd.get("MYTASKLIST").get(0)),testCaseDataSd.get("MYTASKLIST").get(0), testCaseParam,action);
			Webkeywords.instance().verifyElementDisplayed(driver, genericLocators.link(driver, "Current Task Assignments",testCaseDataSd.get("CURRENTTASKASSIGNMENT_VERIFY").get(0)), testCaseDataSd.get("CURRENTTASKASSIGNMENT_VERIFY").get(0), testCaseParam, action);
			Webkeywords.instance().verifyTextDisplayed(driver, genericLocators.textOnPage(driver, "Due Date",testCaseDataSd.get("DUEDATE_VERIFY").get(0)), testCaseDataSd.get("DUEDATE_VERIFY").get(0), testCaseParam, action);
			Webkeywords.instance().verifyTextDisplayed(driver, genericLocators.textOnPage(driver, "Subject",testCaseDataSd.get("SUBJECT_VERIFY").get(0)), testCaseDataSd.get("SUBJECT_VERIFY").get(0), testCaseParam, action);
			Webkeywords.instance().verifyTextDisplayed(driver, genericLocators.textOnPage(driver, "Related To",testCaseDataSd.get("RELATEDTO_VERIFY").get(0)), testCaseDataSd.get("RELATEDTO_VERIFY").get(0), testCaseParam, action);
			Webkeywords.instance().verifyTextDisplayed(driver, genericLocators.textOnPage(driver, "Priority",testCaseDataSd.get("PRIORITY_VERIFY").get(0)), testCaseDataSd.get("PRIORITY_VERIFY").get(0), testCaseParam, action);
			Webkeywords.instance().verifyTextDisplayed(driver, genericLocators.textOnPage(driver, "Status",testCaseDataSd.get("STATUS_VERIFY").get(0)), testCaseDataSd.get("STATUS_VERIFY").get(0), testCaseParam, action);
			Webkeywords.instance().verifyTextDisplayed(driver, genericLocators.textOnPage(driver, "Source",testCaseDataSd.get("SOURCE_VERIFY").get(0)), testCaseDataSd.get("SOURCE_VERIFY").get(0), testCaseParam, action);
			
			
		} catch (Exception e) {
				logger.error("Failed == {} ", action.getPageActionDescription());
				exceptionDetails.logExceptionDetails(driver, testCaseParam, action.getPageActionName(), action.getPageActionDescription(), startTime,e);
			}
	}
	
	public void verifyingHomeMyOrganizationFieldsHeaders (TestCaseParam testCaseParam, String scriptIteration, String pomIteration) throws CustomException {
		PageDetails action = new PageDetails();
		LocalDateTime startTime= LocalDateTime.now();
		action.setPageActionName("verifying MyOrganization Fields");
		action.setPageActionDescription("verifying MyOrganization Fields");
		try {
			Map<String, ArrayList<String>>	testCaseDataSd = util.getScreenTCData(screenName, TestRunSettings.getTestNGTestMethodName(),TestRunSettings.getTestDataPath(),
					TestRunSettings.getTestDataMappingFileName() ,TestRunSettings.getTestDataMappingSheetNameSd(),scriptIteration,pomIteration);
				
			Webkeywords.instance().click(driver, genericLocators.link(driver, "My Organizations",testCaseDataSd.get("MYORGANIZATION").get(0)),testCaseDataSd.get("MYORGANIZATION").get(0), testCaseParam,action);
			Webkeywords.instance().verifyElementDisplayed(driver, genericLocators.link(driver, "New Providers created in past 120 days",testCaseDataSd.get("NEWPROVIDER120DAYS_VERIFY").get(0)), testCaseDataSd.get("NEWPROVIDER120DAYS_VERIFY").get(0), testCaseParam, action);
			
			Webkeywords.instance().verifyTextDisplayed(driver, genericLocators.textOnPage(driver, "Name",testCaseDataSd.get("NAME_VERIFY").get(0)), testCaseDataSd.get("NAME_VERIFY").get(0), testCaseParam, action);
			
		} catch (Exception e) {
				logger.error("Failed == {} ", action.getPageActionDescription());
				exceptionDetails.logExceptionDetails(driver, testCaseParam, action.getPageActionName(), action.getPageActionDescription(), startTime,e);
			}
		
	}

================================

<?xml version="1.0" encoding="UTF-8"?>
<suite name="Suite" parallel="tests" thread-count="3">

	<test name="T2926">
    <classes>
      <class name="uitests.testng.milestone3.T2926">
      <methods>
      	<include name="testT2926" />
			</methods>
	  </class>
	</classes>
	</test>
	
	<test name="T2928">
    <classes>
      <class name="uitests.testng.milestone3.T2928">
      <methods>
      	<include name="testT2928" />
			</methods>
	  </class>
	</classes>
	</test>
	
	<test name="T2922">
    <classes>
      <class name="uitests.testng.milestone3.T2922">
      <methods>
      	<include name="testT2922" />
			</methods>
	  </class>
	</classes>
	</test>
	
	
</suite> <!-- Suite -->


