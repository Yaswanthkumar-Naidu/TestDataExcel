
public void Select(WebDriver _driver, WebElement element, SelectType type, String options, TestCaseParam testCaseParam, PageDetails pageDetails) throws Exception {
 
        String Action = "Select dropdown Value:" + options;
        String ActionDescription = "Select dropdown Value:-" + options;
        LocalDateTime StartTime = LocalDateTime.now();
 
        try {
 
            logger.info("Option = " + options);
 
            switch (type) {
                case SelectByIndex:
                    try {
 
 
                        if (options.equals("N//A") || options.equals("N/A") || options.equals("n//a") || options.equals("n/a")) {
                            break;
                        } else {
 
                            WebKeywords.Instance().FluentWait(_driver, element);
                            ScrollIntoViewElement(_driver, element);
                            if (element.isEnabled()) {
                                Action = "Selected Value:-" + options;
                                ActionDescription = "Selected Value:-" + options;
                                Select select = new Select(element);
                                select.selectByIndex(Integer.parseInt(options));
                                TestStepDetails.logTestStepDetails(_driver, testCaseParam, Action, ActionDescription, pageDetails, StartTime, Status_Done);
                            }
 
                        }
 
                    } catch (Exception e) {
                        logger.error("Failed ==> " + Action + ActionDescription);
                        TestStepDetails.logExceptionDetails(_driver, testCaseParam, Action, ActionDescription, StartTime, e);
                        TestStepDetails.logTestStepDetails(_driver, testCaseParam, Action, ActionDescription, pageDetails, StartTime, Status_Fail);
 
                        throw e;
                    }
 
                    break;
                case SelectByText:
 
                    if (options.equals("N//A") || options.equals("N/A") || options.equals("n//a") || options.equals("n/a")) {
                        break;
                    } else {
                        WebKeywords.Instance().FluentWait(_driver, element);
                        ScrollIntoViewElement(_driver, element);
                        if (element.isEnabled() && element.isDisplayed()) {
                            Action = "Selected Value:-" + options;
                            ActionDescription = "Selected Value:-" + options;
                            Select select1 = new Select(element);
                            select1.selectByVisibleText(options);
                            TestStepDetails.logTestStepDetails(_driver, testCaseParam, Action, ActionDescription, pageDetails, StartTime, Status_Done);
                            //VerifyValueSelected(_driver, element,options,testCaseParam,pageDetails);
                        }
 
 
                    }
                    break;
                case SelectByValue:
 
                    WebKeywords.Instance().FluentWait(_driver, element);
                    ScrollIntoViewElement(_driver, element);
                    //WebKeywords.Instance().WaitElementToBeClickablenew(_driver, element, 5000);
                    Select select2 = new Select(element);
                    select2.selectByValue(options);
                    TestStepDetails.logTestStepDetails(_driver, testCaseParam, Action, ActionDescription, pageDetails, StartTime, Status_Done);
 
                    VerifyValueSelected(_driver, element, options, testCaseParam, pageDetails);
                    Thread.sleep(100);
                    break;
                default:
                    throw new Exception("Get error in using Selected");
            }
        } catch (Exception e) {
            logger.error("Failed ==> " + Action + ActionDescription);
            TestStepDetails.logExceptionDetails(_driver, testCaseParam, Action, ActionDescription, StartTime, e);
            TestStepDetails.logTestStepDetails(_driver, testCaseParam, Action, ActionDescription, pageDetails, StartTime, Status_Fail);
 
            throw e;
        }
    }
